#!/bin/bash
# Edition : Stable Edition V2.0
# Auther  : Muh Aripin Ilham
# (C) Copyright 2023-2024 By  Under Tunnel
# =========================================
#!/bin/bash
g=$(cat /usr/sbin/mtsc.list | grep "^color" | cut -d " " -f 2)
gb=$(cat /usr/sbin/mtsc.list | grep "^color" | cut -d " " -f 3)
b=$(cat /usr/sbin/mtsc.list | grep "^color" | cut -d " " -f 4)
p=$(cat /usr/sbin/mtsc.list | grep "^color" | cut -d " " -f 5)
r=$(cat /usr/sbin/mtsc.list | grep "^color" | cut -d " " -f 6)
y=$(cat /usr/sbin/mtsc.list | grep "^color" | cut -d " " -f 7)
repo=https://raw.githubusercontent.com/gazzent/ip/main/ip
ipsaya=$(wget -qO- ipv4.icanhazip.com);
data_server=$(curl -v --insecure --silent https://google.com/ 2>&1 | grep Date | sed -e 's/< Date: //')
date_list=$(date +"%Y-%m-%d" -d "$data_server")
useexp=$(wget -qO- ${repo} | grep $ipsaya | awk '{print $4}')
if [[ $date_list < $useexp ]]; then
echo -ne
else
echo -e "${g}────────────────────────────────────────────${p}"
echo -e "${b}          404 NOT FOUND AUTOSCRIPT          ${p}"
echo -e "${g}────────────────────────────────────────────${p}"
echo -e ""
echo -e "            ${r}PERMISSION DENIED OR!${p}"
echo -e "   ${y}Your VPS${p} $ipsaya ${y}Expired${p}"
echo -e "     ${y}Buy access permissions for scripts${p}"
echo -e "             ${y}Contact Admin :${p}"
echo -e "      ${gb}Telegram${p} t.me/mehonk_mt"
echo -e "${g}────────────────────────────────────────────${p}"
exit
fi
ISP=$(cat /etc/xray/isp)
CITY=$(cat /etc/xray/city)
domain=$(cat /etc/xray/domain)
WKT=$(curl -s ipinfo.io/timezone)
IPVPS=$(curl -s ipv4.icanhazip.com)
tram=$(free -m | awk 'NR==2 {print $2}')
swap=$(free -m | awk 'NR==4 {print $2}')
freq=$(awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo)
cores=$(awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo)
cname=$(awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo)
Open_SSH=$(systemctl status ssh | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Dropbear=$(systemctl status dropbear | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Udp=$(systemctl status custom | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Psiphon=$(systemctl status psiphon | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
SSH_Websocket=$(systemctl status ws@stws | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
OpenVPN=$(systemctl status openvpn | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Nginx_Webserver=$(systemctl status nginx | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Haproxy=$(systemctl status haproxy | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
DNS_Server=$(systemctl status server | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
OpenVPN_Websocket=$(systemctl status ws@stws | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
XRAY_Vmess_TLS=$(systemctl status xray | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
XRAY_Vmess_gRPC=$(systemctl status xray | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
XRAY_Vmess_None_TLS=$(systemctl status xray | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
XRAY_Vless_TLS=$(systemctl status xray | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
XRAY_Vless_gRPC=$(systemctl status xray | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
XRAY_Vless_None_TLS=$(systemctl status xray | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Trojan_gRPC=$(systemctl status xray | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Trojan_WS=$(systemctl status xray | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Shadowsocks_WS=$(systemctl status xray | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Shadowsocks_gRPC=$(systemctl status xray | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Iptables=$(systemctl status netfilter-persistent | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Squid=$(systemctl status squid | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
BadVPN=$(systemctl status badvpn3 | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
RClocal=$(systemctl status rc-local | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
Autorebot=$(systemctl status cron | grep active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g')
if [[ $Open_SSH == "running" ]]; then
status_1="${b}Online${p}"
else
status_1="${r}Offline${p}"
fi
if [[ $Dropbear == "running" ]]; then
status_2="${b}Online${p}"
else
status_2="${r}Offline${p}"
fi
if [[ $Udp == "running" ]]; then
status_3="${b}Online${p}"
else
status_3="${r}Offline${p}"
fi
if [[ $SSH_Websocket == "running" ]]; then
status_4="${b}Online${p}"
else
status_4="${r}Offline${p}"
fi
if [[ $OpenVPN == "exited" ]]; then
status_5="${b}Online${p}"
else
status_5="${r}Offline${p}"
fi
if [[ $Nginx_Webserver == "running" ]]; then
status_6="${b}Online${p}"
else
status_6="${r}Offline${p}"
fi
if [[ $Haproxy == "running" ]]; then
status_7="${b}Online${p}"
else
status_7="${r}Offline${p}"
fi
if [[ $DNS_Server == "running" ]]; then
status_8="${b}Online${p}"
else
status_8="${r}Offline${p}"
fi
if [[ $Udp == "running" ]]; then
status_9="${b}Online${p}"
else
status_9="${r}Offline${p}"
fi
if [[ $OpenVPN_Websocket == "running" ]]; then
status_10="${b}Online${p}"
else
status_10="${r}Offline${p}"
fi
if [[ $XRAY_Vmess_gRPC == "running" ]]; then
status_12="${b}Online${p}"
else
status_12="${r}Offline${p}"
fi
if [[ $XRAY_Vmess_None_TLS == "running" ]]; then
status_13="${b}Online${p}"
else
status_13="${r}Offline${p}"
fi
if [[ $XRAY_Vless_gRPC == "running" ]]; then
status_15="${b}Online${p}"
else
status_15="${r}Offline${p}"
fi
if [[ $XRAY_Vless_None_TLS == "running" ]]; then
status_16="${b}Online${p}"
else
status_16="${r}Offline${p}"
fi
if [[ $Trojan_gRPC == "running" ]]; then
status_17="${b}Online${p}"
else
status_17="${r}Offline${p}"
fi
if [[ $Trojan_WS == "running" ]]; then
status_18="${b}Online${p}"
else
status_18="${r}Offline${p}"
fi
if [[ $Shadowsocks_WS == "running" ]]; then
status_19="${b}Online${p}"
else
status_19="${r}Offline${p}"
fi
if [[ $Shadowsocks_gRPC == "running" ]]; then
status_20="${b}Online${p}"
else
status_20="${r}Offline${p}"
fi
if [[ $Iptables == "exited" ]]; then
status_21="${b}Online${p}"
else
status_21="${r}Offline${p}"
fi
if [[ $Squid == "running" ]]; then
status_22="${b}Online${p}"
else
status_22="${r}Offline${p}"
fi
if [[ $BadVPN == "running" ]]; then
status_23="${b}Online${p}"
else
status_23="${r}Offline${p}"
fi
if [[ $RClocal == "exited" ]]; then
status_24="${b}Online${p}"
else
status_24="${r}Offline${p}"
fi
if [[ $Autorebot == "running" ]]; then
status_25="${b}Online${p}"
else
status_25="${r}Offline${p}"
fi
clear
fun_bar() {
CMD[0]="$1"
CMD[1]="$2"
(
[[ -e $HOME/fim ]] && rm $HOME/fim
${CMD[0]} -y >/dev/null 2>&1
${CMD[1]} -y >/dev/null 2>&1
touch $HOME/fim
) >/dev/null 2>&1 &
tput civis
echo -ne "  ${b}Please Wait Loading ${p}- ${g}["
while true; do
for ((i = 0; i < 18; i++)); do
echo -ne "[0;32m▰"
sleep 0.1s
done
[[ -e $HOME/fim ]] && rm $HOME/fim && break
echo -e " ${g}]"
sleep 1s
tput cuu1
tput dl1
echo -ne "  ${b}Please Wait Loading ${p}- ${g}["
done
echo -e " ${g}]${p} -${y} OK !${p}"
tput cnorm
}
res1() {
systemctl daemon-reload
}
res2() {
systemctl restart nginx
}
res3() {
systemctl restart xray
}
res4() {
systemctl restart rc-local
}
res5() {
systemctl restart custom
}
res6() {
systemctl restart server
}
res7() {
systemctl restart dropbear
}
res8() {
systemctl restart ws@drws
systemctl restart ws@opws
systemctl restart ws@stws
systemctl restart ws@ovws
}
res9() {
systemctl restart openvpn
}
res10() {
systemctl restart cron
}
res11() {
systemctl restart haproxy
}
res12() {
systemctl restart ssh
systemctl restart sshd
}
res13() {
systemctl reload squid
}
res14() {
systemctl restart psiphon
}
res15() {
systemctl restart badvpn1
systemctl restart badvpn2
systemctl restart badvpn3
}
runx() {
clear
echo -e "${g}┌──────────────────────────────────────────┐${p}"
echo -e "   ${b}      ⇱ Service Information ⇲        ${p}"
echo -e "${g}└──────────────────────────────────────────┘${p}"
echo -e "${g}┌──────────────────────────────────────────┐"
echo -e "${g}│   >>> Service Running                    "
echo -e "${g}│  ${gb}- Open_SSH${p}              : $status_1"
echo -e "${g}│  ${gb}- Dropbear${p}              : $status_2"
echo -e "${g}│  ${gb}- OpenVPN${p}               : $status_5"
echo -e "${g}│  ${gb}- Haproxy${p}               : $status_7"
echo -e "${g}│  ${gb}- Nginx_Webserver${p}       : $status_6"
echo -e "${g}│  ${gb}- SlowDNS_Server${p}        : $status_8"
echo -e "${g}│  ${gb}- Psiphon_Server${p}        : $status_9"
echo -e "${g}│  ${gb}- SSH_Udp_Custom${p}        : $status_3"
echo -e "${g}│  ${gb}- SSH_Websocket${p}         : $status_4"
echo -e "${g}│  ${gb}- OpenVPN_Websocket${p}     : $status_10"
echo -e "${g}│  ${gb}- Xray_Vmess_gRPC${p}       : $status_12"
echo -e "${g}│  ${gb}- Xray_Vmess_WS${p}         : $status_13"
echo -e "${g}│  ${gb}- Xray_Vless_gRPC${p}       : $status_15"
echo -e "${g}│  ${gb}- Xray_Vless_WS${p}         : $status_16"
echo -e "${g}│  ${gb}- Xray_Trojan_gRPC${p}      : $status_17"
echo -e "${g}│  ${gb}- Xray_Trojan_WS${p}        : $status_18"
echo -e "${g}│  ${gb}- Xray_Shadowsocks_WS${p}   : $status_19"
echo -e "${g}│  ${gb}- Xray_Shadowsocks_gRPC${p} : $status_20"
echo -e "${g}│  ${gb}- Iptables${p}              : $status_21"
echo -e "${g}│  ${gb}- Squid${p}                 : $status_22"
echo -e "${g}│  ${gb}- BadVPN${p}                : $status_23"
echo -e "${g}│  ${gb}- Rc-local${p}              : $status_24"
echo -e "${g}│  ${gb}- Autoreboot${p}            : $status_25"
echo -e "${g}└───────────────────────────────────────┘${p}"
echo ""
read -n 1 -s -r -p "Press [ Enter ] to back on menu"
get-service
}
resetx() {
clear
echo -e "${g} ┌──────────────────────────────────────────┐${p}"
echo -e "${g} │${b}          RESTART SERVICE SERVER${g}          |${p}"
echo -e "${g} └──────────────────────────────────────────┘${p}"
echo -e "${g} ┌──────────────────────────────────────────┐${p}"
echo -e ""
echo -e "  ${g} service daemon-reload${p}"
fun_bar 'res1'
echo -e "  ${g} service restart ssh${p}"
fun_bar 'res12'
echo -e "  ${g} service restart nginx${p}"
fun_bar 'res2'
echo -e "  ${g} service restart xray${p}"
fun_bar 'res3'
echo -e "  ${g} service restart rc-local${p}"
fun_bar 'res4'
echo -e "  ${g} service restart udp-custom${p}"
fun_bar 'res5'
echo -e "  ${g} service restart slowdns${p}"
fun_bar 'res6'
echo -e "  ${g} service restart dropbear${p}"
fun_bar 'res7'
echo -e "  ${g} service restart websocket${p}"
fun_bar 'res8'
echo -e "  ${g} service restart openvpn${p}"
fun_bar 'res9'
echo -e "  ${g} service restart cron${p}"
fun_bar 'res10'
echo -e "  ${g} service restart haproxy${p}"
fun_bar 'res11'
echo -e "  ${g} service restart squid${p}"
fun_bar 'res13'
echo -e "  ${g} service restart psiphon${p}"
fun_bar 'res14'
echo -e "  ${g} service restart badvpn${p}"
fun_bar 'res15'
echo -e ""
echo -e "${g} └──────────────────────────────────────────┘${p}"
echo -e ""
read -n 1 -s -r -p "Press [ Enter ] to back on menu"
get-service
}
portx() {
clear
echo -e "${g}┌─────────────────────────────────────────────┐${p}"
echo -e "${g}│            ${b}PORT SERVICE INFO${g}                |${p}"
echo -e "${g}└─────────────────────────────────────────────┘${p}"
echo -e "${g}┌─────────────────────────────────────────────┐"
echo -e "${g}│       >>> Service & Port                    │"
echo -e "${g}│   ${gb}- Open SSH                ${p}:${b} 22, 2222      ${g}│"
echo -e "${g}│   ${gb}- Dropbear                ${p}:${b} 109, 143      ${g}│"
echo -e "${g}│   ${gb}- Nginx Webserver         ${p}:${b} 81            ${g}│"
echo -e "${g}│   ${gb}- Haproxy Loadbalancer    ${p}:${b} 443, 80       ${g}│"
echo -e "${g}│   ${gb}- SSH Udp-Custom          ${p}:${b} 54-65535      ${g}│"
echo -e "${g}│   ${gb}- SSH Websocket TLS/SNI   ${p}:${b} 443           ${g}│"
echo -e "${g}│   ${gb}- SSH Websocket NTLS      ${p}:${b} 80, 8080, 8880${g}│"
echo -e "${g}│   ${gb}- SSL TLS/SNI             ${p}:${b} 443           ${g}│"
echo -e "${g}│   ${gb}- OpenVPN SSL             ${p}:${b} 443           ${g}│"
echo -e "${g}│   ${gb}- OpenVPN TCP             ${p}:${b} 1194          ${g}│"
echo -e "${g}│   ${gb}- OpenVPN UDP             ${p}:${b} 2200          ${g}│"
echo -e "${g}│   ${gb}- SlowDNS Server          ${p}:${b} 443, 53,      ${g}│"
echo -e "${g}│   ${gb}- Psiphon Server          ${p}:${b} 8443          ${g}│"
echo -e "${g}│   ${gb}- XRAY Vmess TLS          ${p}:${b} 443           ${g}│"
echo -e "${g}│   ${gb}- XRAY Vmess gRPC         ${p}:${b} 443           ${g}│"
echo -e "${g}│   ${gb}- XRAY Vmess NTLS         ${p}:${b} 80            ${g}│"
echo -e "${g}│   ${gb}- XRAY Vless TLS          ${p}:${b} 443           ${g}│"
echo -e "${g}│   ${gb}- XRAY Vless gRPC         ${p}:${b} 443           ${g}│"
echo -e "${g}│   ${gb}- XRAY Vless NTLS         ${p}:${b} 80            ${g}│"
echo -e "${g}│   ${gb}- XRAY Trojan TLS         ${p}:${b} 443           ${g}│"
echo -e "${g}│   ${gb}- XRAY Trojan gRPC        ${p}:${b} 443           ${g}│"
echo -e "${g}│   ${gb}- XRAY Trojan NTLS        ${p}:${b} 80            ${g}│"
echo -e "${g}│   ${gb}- XRAY Shadowsocks TLS    ${p}:${b} 443           ${g}│"
echo -e "${g}│   ${gb}- XRAY Shadowsocks gRPC   ${p}:${b} 443           ${g}│"
echo -e "${g}│   ${gb}- XRAY Shadowsocks NTLS   ${p}:${b} 80            ${g}│"
echo -e "${g}│   ${gb}- BadVPN                  ${p}:${b} 7100 - 7300   ${g}│"
echo -e "${g}│   ${gb}- Proxy Squid             ${p}:${b} 3128          ${g}│"
echo -e "${g}└─────────────────────────────────────────────┘"
echo -e "${g}┌─────────────────────────────────────────────┐"
echo -e "${g}│        >>> Contact & Info                   │"
echo -e "${g}│   ${gb}- My Telegram       ${p}:${b} t.me/mehonk_mt      ${g}│"
echo -e "${g}│   ${gb}- Dev / Main        ${p}:${b} MakhlukTunnel       ${g}│"
echo -e "${g}└─────────────────────────────────────────────┘"
echo ""
read -n 1 -s -r -p "Press [ Enter ] to back on menu"
get-service
}
clear
echo -e " ${g}┌──────────────────────────────────────────┐${p}"
echo -e " ${g}│${b}         SERVICE MANAGER              ${p}"
echo -e " ${g}└──────────────────────────────────────────┘${p}"
echo -e " ${g}┌──────────────────────────────────────────┐${p}"
echo -e " ${g}│  ${gb}[1]•${p} ${b}Check Service Running${p}"
echo -e " ${g}│  ${gb}[2]•${p} ${b}Check Detail Port${p}"
echo -e " ${g}│  ${gb}[3]•${p} ${b}Check Load Service${p}"
echo -e " ${g}│  ${gb}[4]•${p} ${b}Restart Service${p}"
echo -e " ${g}└──────────────────────────────────────────┘${p}"
echo -e ""
read -p "   Select From Options [ 1 - 4 ] : " OPT_MENU
echo -e ""
case $OPT_MENU in
1)
clear
runx
;;
2)
clear
portx
;;
3)
clear
gotop
;;
4)
clear
resetx
;;
*)
echo -e "${Red}You wrong command !${Font}"
sleep 1
menu
;;
esac
